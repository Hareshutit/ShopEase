// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Возврат массива постов.
	// (GET /api/v1/post)
	GetMiniPost(ctx echo.Context, params GetMiniPostParams) error
	// Создать новое объявление.
	// (POST /api/v1/post)
	CreatePost(ctx echo.Context) error
	// Удалить объявление.
	// (DELETE /api/v1/post/{id})
	DeletePost(ctx echo.Context, id string) error
	// Вернуть объявление по id.
	// (GET /api/v1/post/{id})
	GetIdPost(ctx echo.Context, id string) error
	// Обновить объявление.
	// (PATCH /api/v1/post/{id})
	UpdatePost(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMiniPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetMiniPost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMiniPostParams
	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMiniPost(ctx, params)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePost(ctx, id)
	return err
}

// GetIdPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdPost(ctx, id)
	return err
}

// UpdatePost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePost(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/post", wrapper.GetMiniPost)
	router.POST(baseURL+"/api/v1/post", wrapper.CreatePost)
	router.DELETE(baseURL+"/api/v1/post/:id", wrapper.DeletePost)
	router.GET(baseURL+"/api/v1/post/:id", wrapper.GetIdPost)
	router.PATCH(baseURL+"/api/v1/post/:id", wrapper.UpdatePost)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXW8TRxf+K6t538uVbQhXvqMNtKlUEYnQXtBcDN6xPdV6d5kZp40iS/5QVSioqKhS",
	"q6oF0Uq9XkyWmJg4f+HMP6rOzK4/12FpoUoFV3Fmd8/nc57n7B6QWtiKwoAFSpLqAZG1JmtR8/NDwahi",
	"26FU+B/1/Wt1Ur15QCIRRkwozuxdVLFGKPbxt8dkTfBI8TAgVQK/QKz7kMAzmOgujPSDEnGJ2o8YqRKp",
	"BA8apOOSzfmHVmw8gQkcQqK78BxiOIERJA5M4Kn+Tj+AIYwhwcM1prepam61aMNGyhVryRwXP8ORsdiF",
	"GJ5be5Dk2ksPqBB039gXvMZyLP5prMTFA93hys8z9BvEcARDm7l+UNRgxyWC3W5zwTxSvZlaX6x0Frw7",
	"a+BCvXY7ux2XXPG4eg+AfwEA1xVV7bzYfoIYjnVX39N9mDgwhlGO0YVob4Whz2jwNmBlMSFEKD7e2dlG",
	"w4tQqIVejjvzgGOuuaQeihZVpEp4oDYuznzwQLEGExh1i0lJG2sNZZdfhfrUYXY7hn617fvv4fwezlmY",
	"NyQTW96qxS3PgVOYwFjfN7Ucpo0fr7HzGWdfyVzATDBF/S0kuqf7MMScT3UXJroHL2Gi+/gbhqWcOVhC",
	"cxqqW5zM0x5k0eWw+6c84K8ah7cOuVCq3BZsvsZYnFMZPgNgm+cfYGln5vCTYmwJRx2XSFZrC672r+Py",
	"aJFyi1HBxOW2as7+u5px/yef7xDXrppmxM3VWYhNpSJUG5fwoB6upn0tYsHliDsbpYoDh1g0R/cMpw5h",
	"pHsQO1EoFZ7F8EL3IXauN8PoCpXM1ME2mWRnzhftSmWjJpnY4zXmYNrmhDmXt7eIS/aYkNbvhVKlVMF2",
	"hBELaMRJlWyYI5dEVDVN3mUa8fLehXKUzlWDmT84UhTDRzSQj5iazh4+K2iLKSakmb8iLTb4gwSOkUZh",
	"mPYcTvVA30VA6nv6GweGju5CAkd6gEDTfRjprh7o7809LxwY6nvw1GjZsZ1Wjh5vt5nhj4Ca5oT1umQY",
	"5gwsSrRZ2j6Kya0iq1gWQ5jgWBm43oUYEnhpA19Kb01kPm/xfxzYE8SH7uuB7q2rgMyIdMXwVJtyDP8K",
	"iYn+EHE40V1bfjPrxzBa6ysUKs/TbMd5NZUskUmem7Y08/YabuB3XHzW2VO0caa5XeySjMJAWna4WKnY",
	"fTFQLLD6E0U+r5kRKX8p7eo0szfVnTBgqUz9X7A6qZL/lWfvr+X05bU8HS4jc4uSg7SylNqjVTbPajpA",
	"xOI8lXDuL1Yu5ZDwQySfXE1Y5eKZLY/VadtXr1WGs3KereV5KT420BshQvQdGBtR1HdgBE/hGOKSUQPZ",
	"brUoLr4EHk4nM9Z9B15CrHu6ByPElimNGWIjLB2XZFy3SHJznw/sjDKpPgi9/TeW8ZyDzqKaIQ90ViB3",
	"YcmzYl+rcuRTvuTz7y4iRZAFiYNUA6eQ6DtwAhPDDnAEh2a5mJxXaKQCbyZvXtpv7uJszyHnSZaN7uv7",
	"DqZkaD5Zs+aj8XnJLB9wr2Ob4DPFVlG1ac6LKOcZjTMUhpI9YzDuFVGSMwgtjxke56549x09MP0e6x/g",
	"xHT8Uu7jPxpMYAmfTUV/mWBOEFE9q/tWWfUAlec/D6Q/bIlgZIGUjx537X615Z1DjFTeWCemXzKKss6i",
	"nqVE8+7Abl7a8EXhRA/W4srUyuGe1Taqas1VhN2IPHpeaOjNK+v0s28hXc3DUAHhw6qk+jB+JzFZmAof",
	"TQt1Jhlao2Ivw2Fb+OnLtKyWywfNUCpEWQf1Ft9rqeD0lm+7mF20pU9LRfywRv1mCoTdzl8BAAD//7iF",
	"23osGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
