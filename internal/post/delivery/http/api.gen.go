// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Возврат массива постов.
	// (GET /api/v1/post)
	GetMiniPost(ctx echo.Context, params GetMiniPostParams) error
	// Создать новое объявление.
	// (POST /api/v1/post)
	CreatePost(ctx echo.Context) error
	// Удалить объявление.
	// (DELETE /api/v1/post/{id})
	DeletePost(ctx echo.Context, id string) error
	// Вернуть объявление по id.
	// (GET /api/v1/post/{id})
	GetIdPost(ctx echo.Context, id string) error
	// Обновить объявление.
	// (PATCH /api/v1/post/{id})
	UpdatePost(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMiniPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetMiniPost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMiniPostParams
	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMiniPost(ctx, params)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePost(ctx, id)
	return err
}

// GetIdPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdPost(ctx, id)
	return err
}

// UpdatePost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePost(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/post", wrapper.GetMiniPost)
	router.POST(baseURL+"/api/v1/post", wrapper.CreatePost)
	router.DELETE(baseURL+"/api/v1/post/:id", wrapper.DeletePost)
	router.GET(baseURL+"/api/v1/post/:id", wrapper.GetIdPost)
	router.PATCH(baseURL+"/api/v1/post/:id", wrapper.UpdatePost)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXW8bRRf+K6t538tV7Da98l0hLQQJNVJTuCi5mHrH9qD17nZmHIgiS/4QoqUVFRUS",
	"CEGrgsT11s02btxs/sKZf4TOzK4/14kLLQpqruLM7p7P5zzP2d0n1bAZhQELlCSVfSKrDdak5ueHglHF",
	"tkKp8D/q+zdqpHJ7n0QijJhQnNm7qGL1UOzhb4/JquCR4mFAKgR+gVj3IIEXkOoODPWjNeIStRcxUiFS",
	"CR7USdslG9MPLdh4BikcQKI78BJiOIYhJA6k8Fx/px/BAEaQ4OES01tUNTabtG4j5Yo1ZYGLn+HQWOxA",
	"DC+tPUgK7WUHVAi6Z+wLXmUFFv80VuKzAuWBYnUm0NI2V36Rpd8ghkMY2NT1o1VTb7tEsLstLphHKrcz",
	"67OlzqN3Jx2cKdhOe6ftkmseVxcI+DcQcFNR1SoK7ieI4Uh39APdg9SBEQwLrM6EeycMfUaDd4ErCwoh",
	"QvHx9vYWGp7FQjX0CtyZBxxzzSW1UDSpssmvXy6sRZNJSetLDeWXz4J95jC/HUO/3vL9Czxf4HlcgFuS",
	"iU1v0eKm58AJpDDSD00xB1nnR0vsfMbZV7IQMSmmqL+FRHd1DwaY84nuQKq78BpS3cPfMCgq4hycs1Dd",
	"1ek860EeXQG/f8oDftY8vHPMhVIVtmDjDebivCrxKQjbOP8Iy1ozBaAMZHNAartEsmpLcLV3ExdIC5U7",
	"jAomrrZUY/Lf9Zz9P/l8m7h23TQzbq5OQmwoFaHeuIQHtXAx7RsRC65G3FlfKztwgEVzdNew6gCGugux",
	"E4VS4VkMr3QPYudmI4yuUclMHWyTSX7mfNEql9erkoldXmUOpm1OmHN1a5O4ZJcJaf1eWiuvlbEdYcQC",
	"GnFSIevmyCURVQ2Td4lGvLR7qRRlg1Vn5g/OFMXwEQ3kI6bGw4fPCtpkiglpBnCVFhv8QQJHyKMwyHoO",
	"J7qv7yMg9QP9jQMDR3cggUPdR6DpHgx1R/f19+aeVw4M9AN4btTsyI4rR493W8wQSEBNc8JaTTIMcwIW",
	"JVosax/F5BaRtVoWA0hxrAxc70MMCby2gc+ltyQynzf5Pw7sGeJD93Rfd5dVQOZMumB4LE4Fhn+FxER/",
	"gDhMdceW38z6EQyX+gqFKvI02XLOppI5Mily05Jm3t7ADfyOq88ye4rWTzW3g12SURhIyw6Xy2W7MQaK",
	"BVaAosjnVTMipS+lXZ4m9sbCEwYs06n/C1YjFfK/0uQdtpS9wJbGw2V0blZzkFbmUnuyyOZ5TfuIWJyn",
	"NZz7y+UrBST8GMmnUBMWuXhiy2M12vLVG5XhtJwni3lRik8N9IaIEH0PRkYV9T0YwnM4gnjNqIFsNZsU",
	"V18Cj8eTGeueA68h1l3dhSFiy5TGDLERlrZLcq6bJbmpTwh2RplUH4Te3lvLeMpBe1bNkAfaC5C7NOdZ",
	"sa9VKfIpn/P5dzeRVZAFiYNUAyeQ6HtwDKlhBziEA7NcpOcVGpnAm8mblvbbOzjbU8h5lmeje/qhgykZ",
	"mk+W7PlofFoyS/vca9sm+EyxRVRtmPNVlPOUxhkKQ8meMBj3VlGSUwitiBmeFq54Dx3dN/0e6R/g2HT8",
	"SuHjPxpMYAlfjEV/nmCOEVFdq/tWWXUflec/D6Q/bIlgaIFUjB536X616Z1DjJTfWifG3zJWZZ1ZPcuI",
	"5v2B3bS04YvCse4vxZWplcM9q21UVRuLCLsVefS80NDbV9bxl9+VdLUIQysIH1Yl04fRe4nJlanwybhQ",
	"p5KhNSp2cxy2hJ+9TMtKqbTfCKVClLVRb/G9lgpO7/i2i/lFW/qsVMQPq9RvZEDYaf8VAAD//04s+EQw",
	"GgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
